// Generated by dojo-bindgen on Fri, 31 May 2024 17:01:42 +0000. Do not modify this file manually.
using System;
using System.Threading.Tasks;
using Dojo;
using Dojo.Starknet;
using UnityEngine;
using dojo_bindings;

// System definitions for `dojo_examples::actions::actions` contract
public class Actions : MonoBehaviour {
    // The address of this contract
    public string contractAddress;

    
    // Call the `dojo_resource` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> dojo_resource(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_resource",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            

    
    // Call the `tile_terrain` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> tile_terrain(Account account, Vec2 vec) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "tile_terrain",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(vec.x).Inner,
                    new FieldElement(vec.y).Inner
                }
            }
        });
    }
            

    
    // Call the `quadrant` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> quadrant(Account account, Position pos) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "quadrant",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(pos.player).Inner,
                    new FieldElement(pos.vec).Inner,
                    new FieldElement(pos.test_everything).Inner
                }
            }
        });
    }
            

    
    // Call the `spawn` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> spawn(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "spawn",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            

    
    // Call the `move` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> move(Account account, Direction direction) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "move",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(direction).Inner
                }
            }
        });
    }
            

    
    // Call the `set_player_config` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> set_player_config(Account account, string name) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "set_player_config",
                calldata = new dojo.FieldElement[] {
                    new FieldElement(name.data).Inner,
                    new FieldElement(name.pending_word).Inner,
                    new FieldElement(name.pending_word_len).Inner
                }
            }
        });
    }
            

    
    // Call the `dojo_init` system with the specified Account and calldata
    // Returns the transaction hash. Use `WaitForTransaction` to wait for the transaction to be confirmed.
    public async Task<FieldElement> dojo_init(Account account) {
        return await account.ExecuteRaw(new dojo.Call[] {
            new dojo.Call{
                to = contractAddress,
                selector = "dojo_init",
                calldata = new dojo.FieldElement[] {
                    
                }
            }
        });
    }
            
}
        